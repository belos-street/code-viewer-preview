// 这是一个TypeScript示例
interface User {
  id: number;
  name: string;
  email?: string;
  age: number;
}

// 类型注解
function getUserInfo(user: User): string {
  return `用户 ${user.name} (ID: ${user.id}) 年龄: ${user.age}岁`;
}

// 泛型
class DataStore<T> {
  private data: T[] = [];

  add(item: T): void {
    this.data.push(item);
  }

  getItems(): T[] {
    return this.data;
  }
}

// 枚举类型
enum Direction {
  Up = "UP",
  Down = "DOWN",
  Left = "LEFT",
  Right = "RIGHT"
}

// 类型别名和联合类型
type ID = string | number;
type UserRole = "admin" | "editor" | "viewer";

function processUser(id: ID, role: UserRole): void {
  console.log(`处理ID为 ${id} 的 ${role} 用户`);
}

// 实现接口的类
class Customer implements User {
  id: number;
  name: string;
  age: number;
  points: number;

  constructor(id: number, name: string, age: number) {
    this.id = id;
    this.name = name;
    this.age = age;
    this.points = 0;
  }

  addPoints(points: number): void {
    this.points += points;
  }
}

// 使用示例
const userStore = new DataStore<User>();
const alice = new Customer(1, "Alice", 28);
alice.addPoints(100);
userStore.add(alice);

const bob: User = { id: 2, name: "Bob", age: 34 };
userStore.add(bob);

console.log(userStore.getItems());
console.log(getUserInfo(alice));
processUser("ABC123", "admin");